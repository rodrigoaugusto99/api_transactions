
npm init -y
npm i -D typescript
npx tsc --init
npm i fastify
npm i tsx -D
npx tsx src/server.ts

git init
git add .
git commit -m "initial commit" 
git remote add origin https://github.com/rodrigoaugusto99/api_rest_node_test.git
git push -u origin master

npm i knex sqlite3
knexfile.ts
@types w/ knex.d.ts
script "knex": "node --no-warnings --import tsx ./node_modules/knex/bin/cli.js"
npm run knex -- migrate:make create-documents  
npm run knex -- migrate:latest

npm i @rocketseat/eslint-config 

criar pasta de rotas, criar nova rota, registrar no server.ts
npm i @fastify/cookie
npm i @types/node
npm i zod


no post: 
-o body eh validado pelo zod
-ha validacao p ver se ha sessionId nos cookies
-se nao tiver, criar um e enviar pros cookies
-fazer o insert com os dados validados do body
e com o cookie que foi criado agr ou que ja tinha

no get:
-nao ha body
-validacao pra saber se ha sessionId.
-fazer o select nas transacoes com aquele sessionId

no get com id da transacao:
- o param eh validado pelo zod
- ha validacao pra ver se ha sessionId nos cookies
- fazer o select com aquele sessionId e aquele id da transacao

todos os metodos:
- todo verificam primeiro se ha cookie no header.
- se tiver, entao usar esse cookie
- com flutter, o cookie eh enviado e recebido pelo header
- se nao tiver cookie no header, pega da web mesmo, com request.cookie
- faz o retorno das transactions nos dois casos.

middleware que lanca erro se nao tiver nem um nem outro

no get:
 - verificar se ha query com a key title
 - se tiver, fazer a busca com esse filtro.


todo: testes automatizados e mais organizacao
nessa logica dupla de verificacao de cookies
pra web e pra flutter






